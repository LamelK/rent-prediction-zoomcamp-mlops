# Optimized Docker Compose for Solar Prediction MLOps
# Uses multi-stage builds with shared base image to minimize size

services:
  # Build shared base image first
  base:
    build:
      context: .
      dockerfile: docker/base/Dockerfile
    image: solar-base:latest
    container_name: solar-base
    # This service only builds the base image, doesn't run
    profiles:
      - build-only

  prefect-server:
    build:
      context: .
      dockerfile: docker/prefect-server/Dockerfile
    container_name: solar-prefect-server
    ports:
      - "4200:4200"
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    networks:
      - solar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  ml-pipeline:
    build:
      context: .
      dockerfile: docker/ml/Dockerfile
      target: production
    container_name: solar-ml-pipeline
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    networks:
      - solar-network
    restart: unless-stopped
    depends_on:
      prefect-server:
        condition: service_healthy

  api-service:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
      target: production
    container_name: solar-api-service
    ports:
      - "8000:8000"
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    networks:
      - solar-network
    restart: unless-stopped
    depends_on:
      prefect-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  monitoring:
    build:
      context: .
      dockerfile: docker/monitoring/Dockerfile
      target: production
    container_name: solar-monitoring
    ports:
      - "8080:8080"
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    networks:
      - solar-network
    restart: unless-stopped
    depends_on:
      api-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  prometheus:
    image: prom/prometheus:latest
    container_name: solar-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - solar-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: solar-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - solar-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  prometheus_data:
  grafana_data:

networks:
  solar-network:
    driver: bridge 